// Global Environment
switch(env.BRANCH_NAME) {
    case 'master':
        // Secret
        env.SECRET_FILE_ID = '302178be-2be7-40c6-b72c-852097494209'
        // Server
        env.SERVER_CREDENTIALS = '5e7982bd-6f22-4cb5-961d-3c18032ed467'
        env.SERVER_USERNAME = 'ubuntu'
        withCredentials([string(credentialsId: '69c75e93-12b2-49ef-b8e0-0f0e51754976', variable: 'ADDRESS')]) {
            env.SERVER_ADDRESS = "${ADDRESS}"
        }
        env.SERVER_PATH = '/home/ubuntu/Automation_With_Playwright'
        break
    default:
        break
}

pipeline {
    agent any
    environment {
        GITHUB_URL = 'https://github.com/chaukhau19/Automation_With_Playwright.git'
        REPO_NAME = 'Friendify'
        BRANCH = 'master'
        FILE_SH = 'FD_Auto.sh'
    }
    stages {
        stage('Checkout code') {
            steps {
                git branch: "${BRANCH}", url: "${GITHUB_URL}"
            }
        }
        stage('Deploying...') {
            when {
                branch 'master'
            }
            steps {
                script {
                    echo "Deploying to '${env.BRANCH_NAME}'..."
                    withCredentials([file(credentialsId: env.SECRET_FILE_ID, variable: 'SECRET_FILE')]) {
                        sshagent([env.SERVER_CREDENTIALS]) {
                            sh """
                            set -e
                            cd ${env.SERVER_PATH}/${REPO_NAME} || exit
                            git pull || exit
                            npm install @playwright/test@latest || exit
                            npx playwright install || exit
                            chmod +x ${FILE_SH}
                            ./${FILE_SH} || exit
                            """
                        }
                    }
                }
            }
        }
        stage('Cleanup') {
            when {
                branch 'master'
            }
            steps {
                script {
                    withCredentials([file(credentialsId: env.SECRET_FILE_ID, variable: 'SECRET_FILE')]) {
                        sshagent([env.SERVER_CREDENTIALS]) {
                            sh """
                            set -e
                            ssh ${env.SERVER_USERNAME}@${env.SERVER_ADDRESS} << EOF
                            cd ${env.SERVER_PATH} || exit
                            git remote -v || exit
                            git remote remove origin || exit
                            cd || exit
                            rm -rf ${SERVER_PATH} || exit
                            EOF
                            """
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                def status = currentBuild.result ?: 'SUCCESS'
                echo "Build status: ${status}"
                sh "rm -rf ./* ./.??*"
            }
        }
    }
}
