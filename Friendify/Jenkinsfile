pipeline {
    agent {
        docker { image 'mcr.microsoft.com/playwright:v1.47.2-jammy' }  
    }
    environment {
        REPO_NAME = 'Friendify'
        FILE_SH = 'FD_Auto.sh'
        FILE_BAT = 'FD_Auto.bat'
        SERVER_PATH = "Automation_With_Playwright/${REPO_NAME}"
        BRANCH_NAME = 'master'
        JENKINS_CREDENTIALS_ID = '6f5eb65d-9009-4049-8b13-1becf88d77cb'
        chatId = '-4520276469'  
        botToken = '8085219018:AAHSTNao6k9OucZc15LQ476N-039N8NR7WI' 
        // GITHUB_USER = 'chaukhau2000@gmail.com'
        // GITHUB_TOKEN = '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'
        //GITHUB_URL = 'https://github.com/chaukhau19/Automation_With_Playwright.git'
    }
    triggers {
        cron('0 0 * * *') 
    }

    stages {
        stage('CI: Checkout Code') {
            steps {
                script {
                    def changes = sh(script: "git diff --name-only origin/${BRANCH_NAME}..${BRANCH_NAME}", returnStdout: true).trim()
                    if (changes) {
                        echo "Changes detected. Checking out code..."
                        withCredentials([usernamePassword(credentialsId: "${JENKINS_CREDENTIALS_ID}", usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_TOKEN')]) {
                            git branch: "${BRANCH_NAME}", 
                                credentialsId: "${JENKINS_CREDENTIALS_ID}", 
                                url: "https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/chaukhau19/Automation_With_Playwright.git"
                        }
                        echo "Code checked out from ${BRANCH_NAME}"
                    } else {
                        echo "No changes detected. Skipping checkout."
                    }

                    echo "Found current working directory at: ${sh(script: 'pwd', returnStdout: true).trim()}"
                    env.REPO_PATH = sh(script: "find . -type d -name '${REPO_NAME}'", returnStdout: true).trim()
                    if (env.REPO_PATH) {
                        echo "Found ${REPO_NAME} at: ${env.REPO_PATH}"
                    } else {
                        error "Repository directory ${REPO_NAME} not found."
                    }
                }

                sh """
                    cd ${env.REPO_PATH}
                    pwd
                    ls -la
                """
            }
        }

        stage('CI: Verify RPM and Setup Dependencies') {
            steps {
                script {
                    dir("${env.REPO_PATH}") {
                        def nodePath = sh(script: "which node || echo 'Not_Installed'", returnStdout: true).trim()
                        def npmPath = sh(script: "which npm || echo 'Not_Installed'", returnStdout: true).trim()
                        def playwrightPath = sh(script: "which npx || echo 'Not_Installed'", returnStdout: true).trim()
                        def nodeVersion = sh(script: "node -v || echo 'Not_Installed'", returnStdout: true).trim()
                        def npmVersion = sh(script: "npm -v || echo 'Not_Installed'", returnStdout: true).trim()
                        def playwrightInstalled = sh(script: "npm list playwright --depth=0 || echo 'Not_Installed'", returnStdout: true).trim()
                        def playwrightTestInstalled = sh(script: "npm list @playwright/test --depth=0 || echo 'Not_Installed'", returnStdout: true).trim()

                        echo "Node Version: ${nodeVersion} at ${nodePath}"
                        echo "NPM Version: ${npmVersion} at ${npmPath}"
                        echo "Playwright Path: ${playwrightPath}"
                        echo "Playwright Installed: ${playwrightInstalled}"
                        echo "@Playwright/Test Installed: ${playwrightTestInstalled}"

                        if (nodeVersion == 'Not_Installed' || npmVersion == 'Not_Installed') {
                            echo "Node or npm not installed. Installing Node.js and npm..."
                        }

                        boolean needsPlaywrightInstall = playwrightInstalled == 'Not_Installed' || playwrightInstalled.contains('invalid')
                        boolean needsPlaywrightTestInstall = playwrightTestInstalled == 'Not_Installed'

                        if (needsPlaywrightInstall || needsPlaywrightTestInstall) {
                            echo "Installing missing dependencies..."
                            sh "cd ${env.REPO_PATH} && npm install"  

                            if (needsPlaywrightInstall) {
                                echo "Uninstalling invalid Playwright version..."
                                sh "cd ${env.REPO_PATH} && npm uninstall playwright"

                                echo "Installing Playwright..."
                                sh "cd ${env.REPO_PATH} && npm install playwright@1.47.2"
                            }

                            if (needsPlaywrightTestInstall) {
                                echo "Installing @playwright/test..."
                                sh "cd ${env.REPO_PATH} && npm install @playwright/test@latest"
                            }
                        } else {
                            echo "All dependencies are already installed."
                        }
                    }
                }
            }
        }



        stage('CD: Run Tests') {
            steps {
                echo 'Starting Tests'
                script {
                    if (isUnix()) {
                        sh """
                            cd ${env.REPO_PATH}
                            chmod +x ${FILE_SH} 
                            ./${FILE_SH}
                        """
                    } else {
                        bat """
                            cd ${env.REPO_PATH}
                            ${FILE_BAT}
                        """
                    }
                }
                echo "Tests executed"
            }
        }

        stage('Archive Test Results') {
            steps {
                archiveArtifacts artifacts: '**/playwright-report/**/*', allowEmptyArchive: true
                echo 'Test results archived.'
            }
        }
    }

    post {
        success {
            script {
                def status = currentBuild.result ?: 'SUCCESS'
                echo "All test cases passed. Build status: ${status}"

                cleanTemporaryFolder()

                def message = "üîß Jenkins Build for ${REPO_NAME} #${env.BUILD_NUMBER}\n" +
                              "‚úÖ Status: ${currentBuild.currentResult}\n" +
                              "üïí Time: ${currentBuild.durationString}\n" +
                              "üîó Link: ${env.BUILD_URL}"

                sh "curl -s -X POST https://api.telegram.org/bot${botToken}/sendMessage -d chat_id=${chatId} -d text='${message}'"
            }
        }
        failure {
            script {
                def status = currentBuild.result ?: 'FAILURE'
                echo "Some test cases failed. Build status: ${status}"

                cleanTemporaryFolder()

                def message = "üîß Jenkins Build for ${REPO_NAME} #${env.BUILD_NUMBER}\n" +
                              "‚ùå Status: ${currentBuild.currentResult}\n" +
                              "üïí Time: ${currentBuild.durationString}\n" +
                              "üîó Link: ${env.BUILD_URL}"

                sh "curl -s -X POST https://api.telegram.org/bot${botToken}/sendMessage -d chat_id=${chatId} -d text='${message}'"
            }
        }
    }
}

def cleanTemporaryFolder() {
    if (isUnix()) {
        if (fileExists("${SERVER_PATH}/temp")) {
            sh "rm -rf ${SERVER_PATH}/temp/*"
        } else {
            echo "Temporary folder does not exist."
        }
    } else {
        bat "if exist ${SERVER_PATH}\\temp\\* del /Q ${SERVER_PATH}\\temp\\*"
    }
}
