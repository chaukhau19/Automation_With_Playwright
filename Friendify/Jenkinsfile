pipeline {
    agent {
        docker { image 'mcr.microsoft.com/playwright:v1.48.0-jammy' }
    }
    environment {
        REPO_NAME = 'Friendify'
        FILE_SH = 'FD_Auto.sh'
        FILE_BAT = 'FD_Auto.bat'
        SERVER_PATH = "Automation_With_Playwright/${REPO_NAME}"
        BRANCH_NAME = 'master'
        JENKINS_CREDENTIALS_ID = '6f5eb65d-9009-4049-8b13-1becf88d77cb'
        chatId = '-4520276469'
        botToken = '8085219018:AAHSTNao6k9OucZc15LQ476N-039N8NR7WI'
    }
    triggers {
        cron('0 0 * * *')
    }

    stages {
        stage('CI: Checkout Code') {
            steps {
                script {
                    def changes = sh(script: "git diff --name-only origin/${BRANCH_NAME}..${BRANCH_NAME}", returnStdout: true).trim()
                    if (changes) {
                        echo "Changes detected. Checking out code..."
                        withCredentials([usernamePassword(credentialsId: "${JENKINS_CREDENTIALS_ID}", usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_TOKEN')]) {
                            git branch: "${BRANCH_NAME}",
                                credentialsId: "${JENKINS_CREDENTIALS_ID}",
                                url: "https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/chaukhau19/Automation_With_Playwright.git"
                        }
                        echo "Code checked out from ${BRANCH_NAME}"
                    } else {
                        echo "No changes detected. Skipping checkout."
                    }

                    env.REPO_PATH = sh(script: "find . -type d -name '${REPO_NAME}'", returnStdout: true).trim()
                    if (env.REPO_PATH) {
                        echo "Found ${REPO_NAME} at: ${env.REPO_PATH}"
                    } else {
                        error "Repository directory ${REPO_NAME} not found."
                    }
                }

                sh """
                    cd ${env.REPO_PATH}
                    pwd
                    ls -la
                """
            }
        }

// stage('Verify and Setup Playwright') {
//     steps {
//         echo 'Verifying Playwright Installation and Setting up Dependencies'
//         script {
//             // Check if Node.js is installed
//             if (sh(script: 'node -v', returnStatus: true) != 0) {
//                 error "Node.js is not installed. Please install Node.js."
//             }

//             // Check if NPM is installed
//             if (sh(script: 'npm -v', returnStatus: true) != 0) {
//                 error "NPM is not installed. Please install NPM."
//             }

//             // Navigate to the repository path
//             sh "cd ${env.REPO_PATH}"

//             // Check if Playwright is installed
//             if (sh(script: 'npx playwright --version', returnStatus: true) != 0) {
//                 echo "Playwright is not installed. Installing dependencies..."
//                 sh """
//                     cd ${env.REPO_PATH}
//                     rm -rf node_modules package-lock.json
//                     npm install 
//                     npx playwright install
//                     npm install @playwright/test@latest
//                 """
//             } else {
//                 echo "Playwright is already installed."
//             }
//         }
//     }
// }

        stage('Setup Dependencies') {
            steps {
                echo 'Setting up dependencies'
                script {
                    sh """
                        cd ${env.REPO_PATH}
                        rm -rf node_modules package-lock.json
                        npm uninstall
                        npx playwright uninstall
                        npm uninstall @playwright/test@latest
                    """
                }
            }
        }
        stage('Verify Playwright Installation') {
            steps {
                echo 'Verifying Playwright Installation'
                script {
                    sh 'node -v'
                    sh 'npm -v'
                    sh 'npx playwright --version'
                }
            }
        }



        stage('CD: Run Tests') {
            steps {
                echo 'Starting Tests'
                script {
                    if (isUnix()) {
                        sh """
                            cd ${env.REPO_PATH}
                            chmod +x ${FILE_SH} 
                            ./${FILE_SH}
                        """
                    } else {
                        bat """
                            cd ${env.REPO_PATH}
                            ${FILE_BAT}
                        """
                    }
                }
                echo "Tests executed"
            }
        }

        stage('Archive Test Results') {
            steps {
                archiveArtifacts artifacts: '**/playwright-report/**/*', allowEmptyArchive: true
                echo 'Test results archived.'
            }
        }
    }

    post {
        success {
            script {
                def status = currentBuild.result ?: 'SUCCESS'
                echo "All test cases passed. Build status: ${status}"

                cleanTemporaryFolder()

                def message = "üîß Jenkins Build for ${REPO_NAME} #${env.BUILD_NUMBER}\n" +
                              "‚úÖ Status: ${currentBuild.currentResult}\n" +
                              "üïí Time: ${currentBuild.durationString}\n" +
                              "üîó Link: ${env.BUILD_URL}"

                sh "curl -s -X POST https://api.telegram.org/bot${botToken}/sendMessage -d chat_id=${chatId} -d text='${message}'"
            }
        }
        failure {
            script {
                def status = currentBuild.result ?: 'FAILURE'
                echo "Some test cases failed. Build status: ${status}"

                cleanTemporaryFolder()

                def message = "üîß Jenkins Build for ${REPO_NAME} #${env.BUILD_NUMBER}\n" +
                              "‚ùå Status: ${currentBuild.currentResult}\n" +
                              "üïí Time: ${currentBuild.durationString}\n" +
                              "üîó Link: ${env.BUILD_URL}"

                sh "curl -s -X POST https://api.telegram.org/bot${botToken}/sendMessage -d chat_id=${chatId} -d text='${message}'"
            }
        }
    }
}

def cleanTemporaryFolder() {
    if (isUnix()) {
        if (fileExists("${SERVER_PATH}/temp")) {
            sh "rm -rf ${SERVER_PATH}/temp/*"
        } else {
            echo "Temporary folder does not exist."
        }
    } else {
        bat "if exist ${SERVER_PATH}\\temp\\* del /Q ${SERVER_PATH}\\temp\\*"
    }
}
