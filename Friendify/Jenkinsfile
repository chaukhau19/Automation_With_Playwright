pipeline {
    agent {
        docker { image 'mcr.microsoft.com/playwright:v1.46.0-jammy' }
    }
    environment {
        GITHUB_URL = 'https://github.com/chaukhau19/Automation_With_Playwright.git'
        REPO_NAME = 'Friendify'
        FILE_SH = 'FD_Auto.sh'
        FILE_BAT = 'FD_Auto.bat'
        SERVER_PATH = "Automation_With_Playwright/${REPO_NAME}"
        BRANCH_NAME = 'master'
    }

    stages {
        stage('CI: Checkout Code') {
            steps {
                git branch: "${BRANCH_NAME}", url: "${GITHUB_URL}"
                echo "Code checked out from ${BRANCH_NAME}"
                echo 'Current working directory:'
                sh 'pwd'

                echo "Finding ${REPO_NAME} directory:"
                script {
                    def repoPath = sh(script: "find . -type d -name '${REPO_NAME}'", returnStdout: true).trim()
                    echo "Found ${REPO_NAME} at: ${repoPath}"
                    if (repoPath) {
                        env.REPO_PATH = repoPath
                    } else {
                        error "Repository directory ${REPO_NAME} not found."
                    }
                }

                echo "Changing directory to ${REPO_NAME} and listing contents:"
                sh """
                    cd ${env.REPO_PATH}
                    pwd
                    ls -la
                """
            }
        }

        stage('Setup Dependencies') {
            steps {
                echo 'Setting up dependencies'
                script {
                    sh """
                        cd ${env.REPO_PATH}
                        rm -rf node_modules package-lock.json
                        npm install
                        npx playwright install
                        npm install @playwright/test@latest
                    """
                }
            }
        }

        stage('Verify Playwright Installation') {
            steps {
                echo 'Verifying Playwright Installation'
                script {
                    sh 'node -v'
                    sh 'npm -v'
                    sh 'npx playwright --version'
                }
            }
        }

        stage('CD: Run Tests') {
            steps {
                echo 'Starting Tests'
                script {
                    if (isUnix()) {
                        sh """
                            cd ${env.REPO_PATH}
                            chmod +x ${FILE_SH}  
                            ./${FILE_SH}
                        """
                    } else {
                        bat """
                            cd ${env.REPO_PATH}
                            ${FILE_BAT}
                        """
                    }
                }
                echo "Tests executed"
            }
        }
        stage('Archive Test Results') {
            steps {
                archiveArtifacts artifacts: '**/playwright-report/**/*', allowEmptyArchive: true
                echo 'Test results archived.'
            }
        }
    }

    post {
        success {
            script {
                def status = currentBuild.result ?: 'SUCCESS'
                echo "All test cases passed. Build status: ${status}"

                if (isUnix()) {
                    if (fileExists("${SERVER_PATH}/temp")) {
                        sh "rm -rf ${SERVER_PATH}/temp/*"
                    } else {
                        echo "Temporary folder does not exist."
                    }
                } else {
                    bat "if exist ${SERVER_PATH}\\temp\\* del /Q ${SERVER_PATH}\\temp\\*"
                }
            }
        }
        failure {
            script {
                def status = currentBuild.result ?: 'FAILURE'
                echo "Some test cases failed. Build status: ${status}"

                if (isUnix()) {
                    if (fileExists("${SERVER_PATH}/temp")) {
                        sh "rm -rf ${SERVER_PATH}/temp/*"
                    } else {
                        echo "Temporary folder does not exist."
                    }
                } else {
                    bat "if exist ${SERVER_PATH}\\temp\\* del /Q ${SERVER_PATH}\\temp\\*"
                }
            }
        }
    }
}
