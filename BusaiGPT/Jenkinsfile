pipeline {
    agent {
        docker { image 'node:18.20.4-alpine3.20' }
    }
    environment {
        GITHUB_URL = 'https://github.com/chaukhau19/Automation_With_Playwright.git'
        REPO_NAME = 'BusaiGPT'
        FILE_SH = 'BS_Auto.sh'
        FILE_BAT = 'BS_Auto.bat'
        COMMAND_1 = 'npx playwright test BS_Actions.spec.js --headed --reporter=line --workers=1'
        SERVER_PATH = "Automation_With_Playwright/${REPO_NAME}"
        BRANCH_NAME = 'master'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: "${BRANCH_NAME}", url: "${GITHUB_URL}"
                echo "Code checked out from ${BRANCH_NAME}"
            }
        }
        stage('Verify Playwright Installation') {
            steps {
                echo 'Verifying Playwright Installation'
                script {
                    sh 'node -v'  // Check Node.js version
                    sh 'npm -v'   // Check npm version
                    sh 'npx playwright --version'  // Check Playwright version
                }
            }
        }

        stage('Search for BS_Auto.sh Script') {
            steps {
                echo 'Searching for BS_Auto.sh'
                script {
                    def findCommand = "find . -name '${FILE_SH}'"
                    def findResult = sh(script: findCommand, returnStdout: true).trim()
                    if (findResult) {
                        echo "${FILE_SH} found at: ${findResult}"
                        env.RUN_TESTS = 'true'
                    } else {
                        echo "${FILE_SH} not found, skipping tests."
                        env.RUN_TESTS = 'false'
                    }
                }
            }
        }

        stage('CI: Run Tests') {
            when {
                expression { return env.RUN_TESTS == 'true' } // Condition to run tests
            }
            steps {
                echo 'Starting Tests'
                script {
                    if (isUnix()) {
                        sh "${COMMAND_1}"
                    } else {
                        bat "${COMMAND_1}"
                    }
                }
                echo "Tests executed"
            }
        }

        stage('Archive Test Results') {
            steps {
                archiveArtifacts artifacts: '**/playwright-report/**/*', allowEmptyArchive: true
                echo 'Test results archived.'
            }
        }
    }

    post {
        always {
            script {
                def status = currentBuild.result ?: 'SUCCESS'
                echo "Build status: ${status}"
                if (isUnix()) {
                    // Check if temporary folder exists before deleting
                    if (fileExists("${SERVER_PATH}/temp")) {
                        sh "rm -rf ${SERVER_PATH}/temp/*"
                    } else {
                        echo "Temporary folder does not exist."
                    }
                } else {
                    bat "if exist ${SERVER_PATH}\\temp\\* del /Q ${SERVER_PATH}\\temp\\*"
                }
            }
        }
    }
}
