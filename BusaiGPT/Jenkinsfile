pipeline {
    agent {
        docker { image 'node:18.20.4-alpine3.20' }
    }
    environment {
        GITHUB_URL = 'https://github.com/chaukhau19/Automation_With_Playwright.git'
        REPO_NAME = 'Friendify'
        FILE_SH = 'Friendify/FD_Auto.sh'
        FILE_BAT = 'Friendify/FD_Auto.bat'
        SERVER_PATH = "Automation_With_Playwright/${REPO_NAME}"
        BRANCH_NAME = 'master'
        FOUND_SCRIPT_PATH = ''
    }
    stages {
        stage('Checkout Code') {
            steps {
                git branch: "${BRANCH_NAME}", url: "${GITHUB_URL}"
                echo "Code checked out from ${BRANCH_NAME}"
            }
        }

        stage('Search for FD_Auto.sh Script') {
            steps {
                echo 'Searching for FD_Auto.sh'
                script {
                    def findCommand = 'find . -name "FD_Auto.sh"'
                    def findResult = sh(script: findCommand, returnStdout: true).trim()
                    if (findResult) {
                        echo "FD_Auto.sh found at: ${findResult}"
                        env.FOUND_SCRIPT_PATH = findResult
                        RUN_TESTS = true
                    } else {
                        echo "FD_Auto.sh not found, skipping tests."
                        RUN_TESTS = false
                    }
                }
            }
        }

        stage('CI: Run Tests') {
            when {
                expression { return RUN_TESTS }  // Run tests only if script was found
            }
            steps {
                echo 'Starting Tests'
                script {
                    if (isUnix()) {
                        // Sử dụng đường dẫn đầy đủ được tìm từ giai đoạn trước
                        if (env.FOUND_SCRIPT_PATH) {
                            sh "chmod +x ${env.FOUND_SCRIPT_PATH}"
                            sh "${env.FOUND_SCRIPT_PATH}"
                        } else {
                            echo "Script path not found."
                        }
                    } else {
                        bat "${FILE_BAT}"
                    }
                }
                echo "Tests executed"
            }
        }

        stage('Archive Test Results') {
            steps {
                archiveArtifacts artifacts: './Friendify/playwright-report/**/*', allowEmptyArchive: true
                echo 'Test results archived.'
            }
        }
    }

    post {
        always {
            script {
                def status = currentBuild.result ?: 'SUCCESS'
                echo "Build status: ${status}"
                if (isUnix()) {
                    // Kiểm tra xem thư mục tạm có tồn tại trước khi xóa
                    if (fileExists("${SERVER_PATH}/temp")) {
                        sh "rm -rf ${SERVER_PATH}/temp/*"
                    } else {
                        echo "Temporary folder does not exist."
                    }
                } else {
                    bat "if exist ${SERVER_PATH}\\temp\\* del /Q ${SERVER_PATH}\\temp\\*"
                }
            }
        }
    }
}
