pipeline {
    agent any
    environment {
        GITHUB_URL = 'https://github.com/chaukhau19/Automation_With_Playwright.git'
        REPO_NAME = 'BusaiGPT'
        FILE_SH = 'BusaiGPT/BS_Auto.sh'
        FILE_BAT = 'BusaiGPT/BS_Auto.bat'
        SERVER_PATH = "Automation_With_Playwright/${REPO_NAME}"
        BRANCH_NAME = 'master'
    }
    stages {
        stage('Checkout Code') {
            steps {
                git branch: "${BRANCH_NAME}", url: "${GITHUB_URL}"
                echo "Code checked out from ${BRANCH_NAME}"
            }
        }
        stage('Setup Node.js') {
            steps {
                script {
                    // Install Node.js on Linux or Windows based on the agent's OS
                    if (isUnix()) {
                        sh 'curl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -'
                        sh 'sudo apt-get install -y nodejs'
                    } else {
                        bat 'choco install nodejs-lts'
                    }
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                script {
                    def workingDir = './BusaiGPT'
                    if (isUnix()) {
                        // Install npm packages
                        sh "cd ${workingDir} && npm install"
                    } else {
                        // Windows equivalent
                        bat "cd ${workingDir} && npm install"
                    }
                }
            }
        }
        stage('Install Playwright Browsers') {
            steps {
                script {
                    def workingDir = './BusaiGPT'
                    if (isUnix()) {
                        // Install Playwright browsers
                        sh "cd ${workingDir} && npx playwright install"
                    } else {
                        // Windows equivalent
                        bat "cd ${workingDir} && npx playwright install"
                    }
                }
            }
        }
        stage('Search for BS_Auto.sh Script') {
            steps {
                echo 'Searching for BS_Auto.sh'
                script {
                    def findCommand = 'find . -name "BS_Auto.sh"'
                    def findResult = sh(script: findCommand, returnStdout: true).trim()
                    if (findResult) {
                        echo "BS_Auto.sh found at: ${findResult}"
                        RUN_TESTS = true
                    } else {
                        echo "BS_Auto.sh not found, skipping tests."
                        RUN_TESTS = false
                    }
                }
            }
        }
        stage('CI: Run Tests') {
            when {
                expression { return RUN_TESTS }  // Run tests only if script was found
            }
            steps {
                echo 'Starting Tests'
                script {
                    if (isUnix()) {
                        sh "chmod +x ${FILE_SH}"
                        sh "./${FILE_SH}"
                    } else {
                        bat "${FILE_BAT}"
                    }
                }
                echo "Tests executed"
            }
        }
        stage('Archive Test Results') {
            steps {
                archiveArtifacts artifacts: './BusaiGPT/playwright-report/**/*', allowEmptyArchive: true
                echo 'Test results archived.'
            }
        }
    }
    post {
        always {
            script {
                def status = currentBuild.result ?: 'SUCCESS'
                echo "Build status: ${status}"
                sh "rm -rf Automation_With_Playwright/${REPO_NAME}/temp/*"
            }
        }
    }
}
