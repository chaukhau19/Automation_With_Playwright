pipeline {
    agent {
        docker { image 'mcr.microsoft.com/playwright:v1.48.0-jammy' }  
    }
    environment {
        REPO_NAME = 'Vocaloid'
        FILE_SH = 'Vocaloid_Auto.sh'
        FILE_BAT = 'Vocaloid_Auto.bat'
        SERVER_PATH = "Automation_With_Playwright/${REPO_NAME}"
        BRANCH_NAME = 'master'
        JENKINS_CREDENTIALS_ID = '6f5eb65d-9009-4049-8b13-1becf88d77cb'
    }
    triggers {
        cron('0 0 * * *') 
    }

     stages {
        stage('CI: Checkout Code') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${JENKINS_CREDENTIALS_ID}", usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_TOKEN')]) {
                        git branch: "${BRANCH_NAME}", 
                            credentialsId: "${JENKINS_CREDENTIALS_ID}", 
                            url: "https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/chaukhau19/Automation_With_Playwright.git"
                    }
                }
                echo "Code checked out from ${BRANCH_NAME}"
                echo 'Current working directory:'
                sh 'pwd'

                echo "Finding ${REPO_NAME} directory:"
                script {
                    def repoPath = sh(script: "find . -type d -name '${REPO_NAME}'", returnStdout: true).trim()
                    echo "Found ${REPO_NAME} at: ${repoPath}"
                    if (repoPath) {
                        env.REPO_PATH = repoPath
                    } else {
                        error "Repository directory ${REPO_NAME} not found."
                    }
                }

                echo "Changing directory to ${REPO_NAME} and listing contents:"
                sh """
                    cd ${env.REPO_PATH}
                    pwd
                    ls -la
                """
            }
        }

        stage('Verify Installation and Setup Dependencies') {
            steps {
                script {
                    def nodeVersion = sh(
                        script: "if [ -d ${SERVER_PATH} ]; then node -v; else echo 'not_installed'; fi",
                        returnStdout: true
                    ).trim()

                    def npmVersion = sh(
                        script: "if [ -d ${SERVER_PATH} ]; then npm -v; else echo 'not_installed'; fi",
                        returnStdout: true
                    ).trim()

                    def playwrightVersion = sh(
                        script: "if [ -d ${SERVER_PATH} ]; then npx playwright --version; else echo 'not_installed'; fi",
                        returnStdout: true
                    ).trim()

                    if (nodeVersion != 'not_installed' && npmVersion != 'not_installed' && playwrightVersion != 'not_installed') {
                        echo "Node, npm, and Playwright are already installed. Skipping setup."
                    } else {
                        echo "Node, npm, or Playwright not installed. Installing dependencies..."
                        sh """
                            cd ${env.REPO_PATH}
                            npm install
                            npx playwright install  
                            npm install @playwright/test@latest
                        """
                    }
                }
            }
        }
        stage('CD: Run Tests') {
            steps {
                echo 'Starting Tests'
                script {
                    if (isUnix()) {
                        sh """
                            cd ${env.REPO_PATH}
                            chmod +x ${FILE_SH} 
                            ./${FILE_SH}
                        """
                    } else {
                        bat """
                            cd ${env.REPO_PATH}
                            ${FILE_BAT}
                        """
                    }
                }
                echo "Tests executed"
            }
        }

        stage('Archive Test Results') {
            steps {
                archiveArtifacts artifacts: '**/playwright-report/**/*', allowEmptyArchive: true
                echo 'Test results archived.'
            }
        }
    }

    post {
        success {
            script {
                def status = currentBuild.result ?: 'SUCCESS'
                echo "All test cases passed. Build status: ${status}"
            }
        }
        failure {
            script {
                def status = currentBuild.result ?: 'FAILURE'
                echo "Some test cases failed. Build status: ${status}"
            }
        }
    }
}
