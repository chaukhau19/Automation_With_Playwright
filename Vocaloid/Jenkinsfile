pipeline {
    agent {
        docker { image 'mcr.microsoft.com/playwright:v1.47.2-jammy' }  
    }
    environment {
        REPO_NAME = 'Vocaloid'
        FILE_SH = 'Vocaloid_Auto.sh'
        FILE_BAT = 'Vocaloid_Auto.bat'
        SERVER_PATH = "Automation_With_Playwright/${REPO_NAME}"
        BRANCH_NAME = 'master'
        JENKINS_CREDENTIALS_ID = '6f5eb65d-9009-4049-8b13-1becf88d77cb'
    }
    triggers {
        cron('0 0 * * *') 
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    def changes = sh(script: "git diff --name-only origin/${BRANCH_NAME}..${BRANCH_NAME}", returnStdout: true).trim()
                    if (changes) {
                        echo "Changes detected. Checking out code..."
                        withCredentials([usernamePassword(credentialsId: "${JENKINS_CREDENTIALS_ID}", usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_TOKEN')]) {
                            git branch: "${BRANCH_NAME}", 
                                credentialsId: "${JENKINS_CREDENTIALS_ID}", 
                                url: "https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/chaukhau19/Automation_With_Playwright.git"
                        }
                        echo "Code checked out from ${BRANCH_NAME}"
                    } else {
                        echo "No changes detected. Skipping checkout."
                    }
                }

                echo 'Current working directory:'
                sh 'pwd'

                echo "Finding ${REPO_NAME} directory:"
                script {
                    def repoPath = sh(script: "find . -type d -name '${REPO_NAME}'", returnStdout: true).trim()
                    echo "Found ${REPO_NAME} at: ${repoPath}"
                    if (repoPath) {
                        env.REPO_PATH = repoPath
                    } else {
                        error "Repository directory ${REPO_NAME} not found."
                    }
                }

                echo "Changing directory to ${REPO_NAME} and listing contents:"
                sh """
                    cd ${env.REPO_PATH}
                    pwd
                    ls -la
                """
            }
        }

        stage('Verify RPM and Setup Dependencies') {
            steps {
                script {
                    dir("${env.REPO_PATH}") {
                        def nodePath = sh(script: "which node || echo 'Not_Installed'", returnStdout: true).trim()
                        def npmPath = sh(script: "which npm || echo 'Not_Installed'", returnStdout: true).trim()
                        def playwrightPath = sh(script: "which npx || echo 'Not_Installed'", returnStdout: true).trim()
                        def nodeVersion = sh(script: "node -v || echo 'Not_Installed'", returnStdout: true).trim()
                        def npmVersion = sh(script: "npm -v || echo 'Not_Installed'", returnStdout: true).trim()
                        def playwrightVersion = sh(script: "npx playwright --version || echo 'Not_Installed'", returnStdout: true).trim()

                        echo "Node Version: ${nodeVersion} at ${nodePath}"
                        echo "NPM Version: ${npmVersion} at ${npmPath}"
                        echo "Playwright Version: ${playwrightVersion} at ${playwrightPath}"

                        if (nodeVersion == 'Not_Installed' || npmVersion == 'Not_Installed' || playwrightVersion == 'Not_Installed') {
                            echo "Node, npm, or Playwright not installed. Installing dependencies..."
                            sh """
                                cd ${env.REPO_PATH}
                                rm -rf node_modules package-lock.json
                                npm install
                                npx playwright install  
                                npm install @playwright/test@latest
                            """
                        } else {
                            echo "Node, npm, and Playwright are already installed. Skipping setup."
                        }
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                echo 'Starting Tests'
                script {
                    if (isUnix()) {
                        sh """
                            cd ${env.REPO_PATH}
                            chmod +x ${FILE_SH} 
                            ./${FILE_SH}
                        """
                    } else {
                        bat """
                            cd ${env.REPO_PATH}
                            ${FILE_BAT}
                        """
                    }
                }
                echo "Tests executed"
            }
        }

        stage('Archive Test Results') {
            steps {
                archiveArtifacts artifacts: '**/playwright-report/**/*', allowEmptyArchive: true
                echo 'Test results archived.'
            }
        }
    }

    post {
        always {
            script {
                def status = currentBuild.result ?: 'SUCCESS'
                echo "Build status: ${status}"

                if (isUnix()) {
                    if (fileExists("${SERVER_PATH}/temp")) {
                        sh "rm -rf ${SERVER_PATH}/temp/*"
                    } else {
                        echo "Temporary folder does not exist."
                    }
                } else {
                    bat "if exist ${SERVER_PATH}\\temp\\* del /Q ${SERVER_PATH}\\temp\\*"
                }
            }
        }
    }
}
