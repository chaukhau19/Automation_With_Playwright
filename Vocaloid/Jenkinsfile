pipeline {
    agent {
        docker { image 'mcr.microsoft.com/playwright:v1.46.0-jammy' }
    }
    environment {
        PROJECT_NAME = 'Vocaloid'  
        REPO_NAME = 'Automation_With_Playwright'
        BRANCH_NAME = 'master'
        JENKINS_CREDENTIALS_ID = '6f5eb65d-9009-4049-8b13-1becf88d77cb'
        SKIP_CHECKOUT = 'false'
        SKIP_DEPENDENCIES = 'false'
        SERVER_PATH = "Automation_With_Playwright/${REPO_NAME}"  
    }
    stages {
        stage('Check for Code Changes') {
            steps {
                script {
                    def remoteCommitHash = sh(
                        script: "git ls-remote https://github.com/chaukhau19/Automation_With_Playwright.git ${BRANCH_NAME} | cut -f1",
                        returnStdout: true
                    ).trim()

                    def localCommitHash = sh(
                        script: "[ -d ${PROJECT_NAME} ] && git -C ${PROJECT_NAME} log -n 1 --pretty=format:'%H' || echo 'NONE'",
                        returnStdout: true
                    ).trim()

                    if (remoteCommitHash == localCommitHash) {
                        echo "No new commits for ${PROJECT_NAME}. Skipping Checkout."
                        env.SKIP_CHECKOUT = 'true'
                    } else {
                        echo "New commits found for ${PROJECT_NAME}. Proceeding with Checkout."
                    }
                }
            }
        }

        stage('Checkout Code') {
            when {
                expression { env.SKIP_CHECKOUT == 'false' }
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${JENKINS_CREDENTIALS_ID}", usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_TOKEN')]) {
                        git branch: "${BRANCH_NAME}",
                            credentialsId: "${JENKINS_CREDENTIALS_ID}",
                            url: "https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/chaukhau19/Automation_With_Playwright.git"
                    }

                    echo "Finding ${PROJECT_NAME} directory:"
                    env.REPO_PATH = sh(script: "find . -type d -name '${PROJECT_NAME}'", returnStdout: true).trim()

                    if (!env.REPO_PATH) {
                        error "Project directory ${PROJECT_NAME} not found."
                    } else {
                        echo "Found project at: ${env.REPO_PATH}"
                    }
                }
            }
        }

        stage('Setup Dependencies and Verify Installation') {
            steps {
                script {
                    def nodeVersion = sh(
                        script: "if [ -d ${SERVER_PATH}/node_modules ]; then node -v; else echo 'not_installed'; fi",
                        returnStdout: true
                    ).trim()

                    def npmVersion = sh(
                        script: "if [ -d ${SERVER_PATH}/node_modules ]; then npm -v; else echo 'not_installed'; fi",
                        returnStdout: true
                    ).trim()

                    def playwrightVersion = sh(
                        script: "if [ -d ${SERVER_PATH}/node_modules ]; then npx playwright --version; else echo 'not_installed'; fi",
                        returnStdout: true
                    ).trim()

                    if (nodeVersion != 'not_installed' && npmVersion != 'not_installed' && playwrightVersion != 'not_installed') {
                        echo "Node, npm, and Playwright are already installed. Skipping setup."
                    } else {
                        echo "Node, npm, or Playwright not installed. Installing dependencies..."
                        sh """
                            cd ${env.REPO_PATH}
                            npm install
                            npx playwright install
                            npm install @playwright/test@latest
                        """
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                echo 'Running tests for project'
                script {
                    if (isUnix()) {
                        sh """
                            cd ${env.REPO_PATH}
                            chmod +x ${PROJECT_NAME}_Auto.sh
                            ./${PROJECT_NAME}_Auto.sh
                        """
                    } else {
                        bat """
                            cd ${env.REPO_PATH}
                            ${PROJECT_NAME}_Auto.bat
                        """
                    }
                }
            }
        }

        stage('Archive Test Results') {
            steps {
                archiveArtifacts artifacts: '**/playwright-report/**/*', allowEmptyArchive: true
                echo 'Test results archived.'
            }
        }
    }

    post {
        success {
            echo "Build and test successful for ${PROJECT_NAME}"
        }
        failure {
            echo "Build and test failed for ${PROJECT_NAME}"
        }
    }
}
