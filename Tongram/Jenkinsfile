pipeline {
    agent {
        docker { image 'mcr.microsoft.com/playwright:v1.47.2-jammy' }
    }
    environment {
        REPO_NAME = 'Tongram'
        FILE_SH = 'TG_Auto.sh'
        FILE_BAT = 'TG_Auto.bat'
        SERVER_PATH = "Automation_With_Playwright/${REPO_NAME}"
        SERVER_PROJECT = "Automation_With_Playwright"
        BRANCH_NAME = 'master'
        JENKINS_CREDENTIALS_ID = '6f5eb65d-9009-4049-8b13-1becf88d77cb'
        chatId = '-1002308985537'
        botToken = '8085219018:AAHSTNao6k9OucZc15LQ476N-039N8NR7WI'
    }
    triggers {
        cron('0 19 * * *')
    }

    stages {
        stage('CI: Checkout Code') {
            steps {
                script {
                    def changes = sh(script: "git diff --name-only origin/${BRANCH_NAME}..${BRANCH_NAME}", returnStdout: true).trim()
                    if (changes) {
                        echo "Changes detected. Checking out code..."
                        withCredentials([usernamePassword(credentialsId: "${JENKINS_CREDENTIALS_ID}", usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_TOKEN')]) {
                            git branch: "${BRANCH_NAME}",
                                credentialsId: "${JENKINS_CREDENTIALS_ID}",
                                url: "https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/chaukhau19/Automation_With_Playwright.git"
                        }
                        echo "Code checked out from ${BRANCH_NAME}"
                    } else {
                        echo "No changes detected. Skipping checkout."
                    }

                    env.REPO_PATH = sh(script: "find . -type d -name '${REPO_NAME}'", returnStdout: true).trim()
                    if (env.REPO_PATH) {
                        echo "Found ${REPO_NAME} at: ${env.REPO_PATH}"
                    } else {
                        error "Repository directory ${REPO_NAME} not found."
                    }
                }
                sh """
                    cd ${env.REPO_PATH}
                    pwd
                    ls -la
                """
            }
        }

        stage('Setup Dependencies') {
            steps {
                echo 'Setting up dependencies'
                script {
                    sh """
                        cd ${env.REPO_PATH}
                        if [ -d "node_modules" ]; then
                            echo "node_modules already exists. Checking Playwright version..."
                            chmod +x node_modules/.bin/playwright

                            if npx playwright --version; then
                                echo "Playwright is already installed. Skipping installation."
                            else
                                echo "Playwright is not installed. Installing..."
                                rm -rf node_modules package-lock.json
                                npm install
                                npx playwright install
                                npm install @playwright/test@latest
                            fi
                        else
                            echo "node_modules does not exist. Installing dependencies..."
                            npm install
                            npx playwright install
                            npm install @playwright/test@latest
                        fi
                    """
                }
            }
        }

        stage('CD: Run Tests') {
            steps {
                echo 'Starting Tests'
                script {
                    if (isUnix()) {
                        sh """
                            cd ${env.REPO_PATH}
                            chmod +x ${FILE_SH}
                            ./${FILE_SH}
                        """
                        echo "Executed ${FILE_SH} script."
                    } else {
                        bat """
                            cd ${env.REPO_PATH}
                            ${FILE_BAT}
                        """
                        echo "Executed ${FILE_BAT} script."
                    }
                }
                echo "Tests executed"
            }
        }

        stage('Parse Test Results') {
            steps {
                script {
                    echo "Checking report directory structure..."
                    sh "echo Current directory: ${env.REPO_PATH}"
                    sh "ls -la ${env.REPO_PATH}/playwright-report"

                    def testResults = parseHtmlReport()
                    if (testResults) {
                        def resultsMessage = """
                        ðŸ”§ Jenkins Build for ${env.REPO_NAME} #${env.BUILD_NUMBER}
                        âœ… Status build: ${currentBuild.currentResult}
                        Tá»•ng sá»‘ testcase: ${testResults.total}
                        Testcase pass: ${testResults.passed}
                        ${testResults.passedTestCases ? " - Testcase ${testResults.passedTestCases}" : ""}
                        Testcase fail: ${testResults.failed}
                        Passrate: ${testResults.passRate}%
                        ðŸ•’ Time: ${currentBuild.durationString}
                        ðŸ”— Link: ${env.BUILD_URL}
                        """
                        sendMessageToTelegram(resultsMessage)
                    } else {
                        echo "No test results found."
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                cleanTemporaryFolder()
            }
        }

        failure {
            script {
                cleanTemporaryFolder()
            }
        }
    }
}

def cleanTemporaryFolder() {
    script {
        echo 'Cleaning up temporary files and directories...'
        def pathsToCheck = [
            "${env.REPO_PATH}/node_modules",
            "${env.REPO_PATH}/package-lock.json",
            "${env.REPO_PATH}/playwright-report",
            "${env.REPO_PATH}/Results",
            "${env.REPO_PATH}/test-results",
            "${env.REPO_PATH}/temp",
            "${env.REPO_PATH}/logs"
        ]
        if (isUnix()) {
            pathsToCheck.each { path ->
                sh "if [ -e '${path}' ]; then echo '${path} exists'; fi"
            }

            sh """
                rm -rf ${env.REPO_PATH}/node_modules
                rm -rf ${env.REPO_PATH}/package-lock.json
                rm -rf ${env.REPO_PATH}/playwright-report
                rm -rf ${env.REPO_PATH}/Results
                rm -rf ${env.REPO_PATH}/test-results
                rm -rf ${env.REPO_PATH}/temp/*
                rm -rf ${env.REPO_PATH}/logs/*
                find ${env.REPO_PATH} -name '*.log' -delete
            """
        } else {
            pathsToCheck.each { path -> 
                def winPath = path.replace("/", "\\")
                bat "if exist '${winPath}' (echo '${winPath} exists')"
            }

            bat """
                rmdir /s /q ${env.REPO_PATH}\\node_modules
                del /Q ${env.REPO_PATH}\\package-lock.json
                rmdir /s /q ${env.REPO_PATH}\\playwright-report
                rmdir /s /q ${env.REPO_PATH}\\Results
                rmdir /s /q ${env.REPO_PATH}\\test-results
                del /Q ${env.REPO_PATH}\\temp\\*
                del /Q ${env.REPO_PATH}\\logs\\*
                del /Q ${env.REPO_PATH}\\*.log
            """
        }
    }
}

def sendMessageToTelegram(message) {
    sh "curl -s -X POST https://api.telegram.org/bot${botToken}/sendMessage -d chat_id=${chatId} -d text='${message}'"
}

def parseHtmlReport() {
    def total = 0
    def passed = 0
    def failed = 0
    def passedTestCases = []
    def reportPath = "${env.REPO_PATH}/playwright-report/index.html"

    if (!fileExists(reportPath)) {
        error "Report file not found: ${reportPath}"
    }
    
    def htmlContent = readFile(reportPath)
    echo "HTML Content Snippet: ${htmlContent.take(1000)}"

    def totalMatcher = (htmlContent =~ /Total Tests:\s*(\d+)/)
    def passedMatcher = (htmlContent =~ /Passed:\s*(\d+)/)
    def failedMatcher = (htmlContent =~ /Failed:\s*(\d+)/)
    def caseMatcher = (htmlContent =~ /<td class="test-name">(.+?)<\/td>/)

    if (totalMatcher && totalMatcher.size() > 0) {
        total = totalMatcher[0][1] as int
    } else {
        error "Total tests not found in report."
    }
    
    if (passedMatcher && passedMatcher.size() > 0) {
        passed = passedMatcher[0][1] as int
    } else {
        error "Passed tests not found in report."
    }
    
    if (failedMatcher && failedMatcher.size() > 0) {
        failed = failedMatcher[0][1] as int
    } else {
        error "Failed tests not found in report."
    }
    
    caseMatcher.each { match ->
        passedTestCases << match[1].trim()
    }

    def passRate = total > 0 ? (passed / total) * 100 : 0

    return [total: total, passed: passed, failed: failed, passRate: passRate, passedTestCases: passedTestCases]
}
